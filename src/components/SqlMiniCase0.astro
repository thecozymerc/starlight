---
/* src/components/SqlMiniCase0.astro — minimal + stable SQL.js demo using local JS+WASM */
---
<style>
  .card{max-width:960px;margin:1.25rem auto;padding:1rem;border:1px solid #e5e7eb;border-radius:12px}
  .row{display:flex;gap:.5rem;flex-wrap:wrap;margin:.5rem 0}
  select,textarea,button,input{padding:.55rem .7rem;border:1px solid #d1d5db;border-radius:8px;font:inherit}
  textarea{width:100%;min-height:160px;font-family:ui-monospace,Menlo,Consolas,monospace}
  table{width:100%;border-collapse:collapse;margin-top:.5rem}
  th,td{padding:.45rem .6rem;border-bottom:1px solid #eee;text-align:left;font-size:.95rem}
  .status{font-size:.9rem;color:#374151;margin-left:.5rem}
  .muted{font-size:.85rem;color:#6b7280}
  button:disabled{opacity:.5;cursor:not-allowed}
</style>

<div class="card">
  <div class="row">
    <select id="picker" aria-label="Sample queries"></select>
    <input id="filter" type="search" placeholder="Filter rows (Ava, Enterprise, 60)…" aria-label="Filter rows" />
  </div>

  <textarea id="sql"></textarea>

  <div class="row">
    <button id="run">Run (Ctrl/⌘+Enter)</button>
    <button id="reset">Reset DB</button>
    <button id="csv">Download CSV</button>
    <span class="status" id="status">Loading…</span>
  </div>

  <div id="out"></div>
  <div class="muted" style="margin-top:.5rem">
    Read-only demo: <a href="/data/cozymerc_deals.db">/data/cozymerc_deals.db</a>
  </div>
</div>

<!-- IMPORTANT: tell Astro not to bundle this public/ asset -->
<script src="/vendor/sqljs/sql-wasm.js" is:inline></script>

<script type="module">
  // Paths on YOUR site
  const SQL_DIR = '/vendor/sqljs/';               // contains sql-wasm.wasm
  const DB_URL  = '/data/cozymerc_deals.db';
  const Q_URL   = '/data/cozymerc_sql_queries.json';

  const $ = s => document.querySelector(s);
  const picker=$('#picker'), txt=$('#sql'), runBtn=$('#run'), resetBtn=$('#reset'),
        csvBtn=$('#csv'), out=$('#out'), status=$('#status'), filter=$('#filter');

  // Disable buttons until DB is ready
  const setButtons = on => { runBtn.disabled = resetBtn.disabled = csvBtn.disabled = !on; };
  setButtons(false);

  // Fallback sample queries if JSON missing
  const FALLBACK = {
    "Top reps by deals & avg days":
`SELECT r.name AS rep, COUNT(*) AS deals, ROUND(AVG(days_to_close),1) AS avg_days
FROM v_won_lost wl JOIN reps r ON r.id = wl.rep_id
GROUP BY r.name
ORDER BY deals DESC, avg_days ASC;`,
    "Win rate by rep":
`WITH t AS (
  SELECT r.name rep,
         SUM(CASE WHEN status='Won' THEN 1 ELSE 0 END) won,
         SUM(CASE WHEN status IN ('Won','Lost') THEN 1 ELSE 0 END) attempts
  FROM opportunities o JOIN reps r ON r.id=o.rep_id
  GROUP BY r.name
)
SELECT rep, won, attempts,
       CASE WHEN attempts=0 THEN 0.0 ELSE ROUND(1.0*won/attempts,3) END win_rate
FROM t ORDER BY win_rate DESC;`,
    "Pipeline aging (open)":
`SELECT r.name rep, c.segment, COUNT(*) open_opps,
       ROUND(AVG(days_open),1) avg_days_open, ROUND(AVG(amount),2) avg_amount
FROM v_open_aging oa
JOIN reps r ON r.id=oa.rep_id
JOIN customers c ON c.id=oa.customer_id
GROUP BY r.name, c.segment
ORDER BY avg_days_open DESC, open_opps DESC;`
  };

  let db=null, last=null;

  async function loadQueries(){
    try{
      const r = await fetch(Q_URL, {cache:'no-store'});
      if(!r.ok) throw 0;
      return await r.json();
    }catch{ return FALLBACK; }
  }

  function fillPicker(qs){
    picker.innerHTML='';
    Object.keys(qs).forEach(t=>{
      const o=document.createElement('option'); o.value=t; o.textContent=t; picker.appendChild(o);
    });
    txt.value = qs[picker.value];
  }

  async function initDb(){
    status.textContent='Loading DB…';
    setButtons(false);
    try {
      // Quick, clear existence checks
      const [js, wasm, dbh] = await Promise.all([
        fetch('/vendor/sqljs/sql-wasm.js', {method:'HEAD'}).then(r=>r.status).catch(()=>0),
        fetch('/vendor/sqljs/sql-wasm.wasm', {method:'HEAD'}).then(r=>r.status).catch(()=>0),
        fetch(DB_URL, {method:'HEAD'}).then(r=>r.status).catch(()=>0),
      ]);
      if (js!==200)   throw new Error('Loader missing at /vendor/sqljs/sql-wasm.js');
      if (wasm!==200) throw new Error('WASM missing at /vendor/sqljs/sql-wasm.wasm');
      if (dbh!==200)  throw new Error('DB missing at ' + DB_URL);

      if (typeof window.initSqlJs !== 'function')
        throw new Error('Loader loaded but window.initSqlJs is not a function');

      const SQL = await window.initSqlJs({ locateFile: f => SQL_DIR + f });

      const buf = await (await fetch(DB_URL, {cache:'no-store'})).arrayBuffer();
      db = new SQL.Database(new Uint8Array(buf));

      status.textContent='Ready';
      setButtons(true);
    } catch (e) {
      status.textContent='Load error: ' + e.message;
      console.error(e);
      db=null; setButtons(false);
    }
  }

  function render(res){
    out.innerHTML='';
    if(!res.length){ out.textContent='No rows.'; return; }
    const { columns, values } = res[0];
    const term = (filter.value||'').toLowerCase();
    const tbl=document.createElement('table'), thead=document.createElement('thead'), trh=document.createElement('tr');
    columns.forEach(c=>{ const th=document.createElement('th'); th.textContent=c; trh.appendChild(th); });
    thead.appendChild(trh); tbl.appendChild(thead);
    const tb=document.createElement('tbody');
    values.forEach(row=>{
      if(term && !row.some(v => String(v??'').toLowerCase().includes(term))) return;
      const tr=document.createElement('tr');
      row.forEach(v=>{ const td=document.createElement('td'); td.textContent=v; tr.appendChild(td); });
      tb.appendChild(tr);
    });
    tbl.appendChild(tb); out.appendChild(tbl);
  }

  function exec(sql){
    try{
      if(!db) throw new Error('DB not ready');
      const res = db.exec(sql);
      last = res.length ? res[0] : null;
      render(res);
      status.textContent='OK ✓';
    }catch(e){
      status.textContent='Error: ' + e.message;
      out.textContent=''; last=null;
    }
  }

  function toCSV(obj){
    if(!obj) return '';
    const header = obj.columns.join(',');
    const lines = obj.values.map(r => r.map(x=>{
      const s=String(x??''); return /[",\n]/.test(s) ? '"' + s.replace(/"/g,'""') + '"' : s;
    }).join(','));
    return [header, ...lines].join('\n');
  }

  function downloadCSV(){
    if(!last) return;
    const blob = new Blob([toCSV(last)], {type:'text/csv;charset=utf-8'});
    const a = document.createElement('a'); a.href = URL.createObjectURL(blob);
    a.download='query.csv'; a.click(); URL.revokeObjectURL(a.href);
  }

  (async ()=>{
    const qs = await loadQueries();
    fillPicker(qs);
    await initDb();

    picker.addEventListener('change', ()=>{ txt.value = qs[picker.value]; });
    runBtn.addEventListener('click', ()=>{ if(!db){ status.textContent='Still initializing…'; return; } exec(txt.value); });
    resetBtn.addEventListener('click', async ()=>{ setButtons(false); try{ db?.close(); }catch{} await initDb(); });
    csvBtn.addEventListener('click', downloadCSV);
    filter.addEventListener('input', ()=>{ if(last) render([last]); });

    txt.addEventListener('keydown', e=>{
      if((e.metaKey||e.ctrlKey) && e.key==='Enter'){ e.preventDefault(); if(!db){ status.textContent='Still initializing…'; return; } exec(txt.value); }
    });
  })();
</script>
